From Coq Require Import Lia Arith.PeanoNat Classes.Morphisms.
From Mecha Require Import Typ Resource Term Var VContext RContext Resources.
Import ResourceNotations TypNotations TermNotations RContextNotations 
       VContextNotations VarNotations ResourcesNotations SetNotations.


(** * Semantics - Type System 

  Wormhole's type system, denoted Œì ‚ãÖ ‚Ñú ‚ä¢ t ‚àà Œ±, ensures that [t] is typed by [Œ±] under two contexts [Œì] and [‚Ñú]. The former is the usual variable context, defined in [VContext.v], and the latter is a resource context, defined in [RContext.v]. This file contains the [well_typed] property definition and its weakening proofs.
*)


Open Scope rcontext_scope. 

Module RC := RContext.
Module VC := VContext.

(** ** Definition - Type System *)

Reserved Notation "G '‚ãÖ' R '‚ä¢' t '‚àà' T" (at level 40, t custom wh, T custom wh).

Inductive well_typed : Œì -> ‚Ñú -> Œõ -> Œ§ -> Prop :=
  | wt_var (Œì : Œì) (Re : ‚Ñú) (x : variable) (œÑ : Œ§) :

            (Œì ‚åäx‚åã)%vc = Some œÑ -> 
    (* -------------------------------- WT-Var *)
         Œì ‚ãÖ Re ‚ä¢ {Term.tm_var x} ‚àà œÑ

  | wt_abs (Œì : Œì) (Re : ‚Ñú) (x : variable) (t : Œõ) (Œ± Œ≤ : Œ§) :

         (‚åàx ‚§Ü Œ±‚åâ Œì)%vc ‚ãÖ Re ‚ä¢ t ‚àà Œ≤ -> (Re‚Å∫ ‚ä© Œ±)%ty ->
    (* --------------------------------------------------- WT-Abs *)
                  Œì ‚ãÖ Re ‚ä¢ (\x :Œ±, t) ‚àà (Œ± ‚Üí Œ≤)

  | wt_app  (Œì : Œì) (Re : ‚Ñú) (t1 t2 : Œõ) (Œ± Œ≤ : Œ§) :

         Œì ‚ãÖ Re ‚ä¢ t1 ‚àà (Œ± ‚Üí Œ≤) -> Œì ‚ãÖ Re ‚ä¢ t2 ‚àà Œ± -> 
    (* ------------------------------------------------ WT-App *)
                      Œì ‚ãÖ Re ‚ä¢ t1 t2 ‚àà Œ≤

  | wt_unit (Œì : Œì) (Re : ‚Ñú) :

    (* --------------------- WT-Unit *)
         Œì ‚ãÖ Re ‚ä¢ unit ‚àà ùüô       

  | wt_pair (Œì : Œì) (Re : ‚Ñú) (t1 t2 : Œõ) (Œ± Œ≤ : Œ§) :

         Œì ‚ãÖ Re ‚ä¢ t1 ‚àà Œ± -> Œì ‚ãÖ Re ‚ä¢ t2 ‚àà Œ≤ -> 
    (* ------------------------------------------ WT-Pair *)
            Œì ‚ãÖ Re ‚ä¢ ‚ü®t1, t2‚ü© ‚àà (Œ± √ó Œ≤)

  | wt_fst (Œì : Œì) (Re : ‚Ñú) (t : Œõ) (Œ± Œ≤ : Œ§) :

         Œì ‚ãÖ Re ‚ä¢ t ‚àà (Œ± √ó Œ≤) -> 
    (* --------------------------- WT-Fst *)
          Œì ‚ãÖ Re ‚ä¢ (fst.t) ‚àà Œ±

  | wt_snd (Œì : Œì) (Re : ‚Ñú) (t : Œõ) (Œ± Œ≤ : Œ§) :

        Œì ‚ãÖ Re ‚ä¢ t ‚àà (Œ± √ó Œ≤) -> 
    (* --------------------------- WT-Snd *)
          Œì ‚ãÖ Re ‚ä¢ (snd.t) ‚àà Œ≤

  | wt_fix (Œì : Œì) (Re : ‚Ñú) (t : Œõ) (œÑ : Œ§) :

         Œì ‚ãÖ Re ‚ä¢ t ‚àà (œÑ ‚Üí œÑ) ->
    (* --------------------------- WT-Fix *)
           Œì ‚ãÖ Re ‚ä¢ Fix t ‚àà œÑ

  | wt_arr (Œì : Œì) (Re : ‚Ñú) (t : Œõ) (Œ± Œ≤ : Œ§) :

             Œì ‚ãÖ Re ‚ä¢ t ‚àà (Œ± ‚Üí Œ≤) -> 
    (* ------------------------------------- WT-Arr *)
         Œì ‚ãÖ Re ‚ä¢ arr(t) ‚àà (Œ± ‚üø Œ≤ ‚à£ ‚àÖ)%s

  | wt_first (Œì : Œì) (Re : ‚Ñú) (R : resources) (t : Œõ) (Œ± Œ≤ œÑ : Œ§) :

         Œì ‚ãÖ Re ‚ä¢ t ‚àà (Œ± ‚üø Œ≤ ‚à£ R) -> (Re‚Å∫ ‚ä© œÑ)%ty ->
    (* ------------------------------------------------ WT-First *)
         Œì ‚ãÖ Re ‚ä¢ first(œÑ:t) ‚àà ((Œ± √ó œÑ) ‚üø (Œ≤ √ó œÑ) ‚à£ R)

  | wt_comp (Œì : Œì) (Re : ‚Ñú) (R R1 R2 : resources) (t1 t2 : Œõ) (Œ± Œ≤ œÑ : Œ§) :

         Œì ‚ãÖ Re ‚ä¢ t1 ‚àà (Œ± ‚üø œÑ ‚à£ R1) -> (R = (R1 ‚à™ R2))%s -> 
         Œì ‚ãÖ Re ‚ä¢ t2 ‚àà (œÑ ‚üø Œ≤ ‚à£ R2) -> (‚àÖ = (R1 ‚à© R2))%s -> 
    (* -------------------------------------------------------- WT-Comp *)
              Œì ‚ãÖ Re ‚ä¢ (t1 >>> t2) ‚àà (Œ± ‚üø Œ≤ ‚à£ R)

  | wt_rsf (Œì : Œì) (Re : ‚Ñú) (r : resource) (œÑin œÑout : Œ§) :

              Re ‚åär‚åã = Some (œÑin,œÑout) ->
    (* -------------------------------------------- WT-Rsf *)
         Œì ‚ãÖ Re ‚ä¢ rsf[r] ‚àà (œÑin ‚üø œÑout ‚à£ \{{r}})

  | wt_wh (Œì : Œì) (Re : ‚Ñú) (R R' : resources) (t1 t2 : Œõ) (Œ± Œ≤ œÑ : Œ§) :

         (R = R' \ \{{ Re‚Å∫; (S (Re‚Å∫)) }})%s -> (Re‚Å∫ ‚ä© Œ±)%ty -> (Re‚Å∫ ‚ä© Œ≤)%ty ->

         Œì ‚ãÖ Re ‚ä¢ t1 ‚àà œÑ ->
         Œì ‚ãÖ (‚åà(S (Re‚Å∫)) ‚§Ü (œÑ,<[ùüô]>)‚åâ (‚åàRe‚Å∫ ‚§Ü (<[ùüô]>,œÑ)‚åâ Re)) ‚ä¢ t2 ‚àà (Œ± ‚üø Œ≤ ‚à£ R') ->
    (* -------------------------------------------------------------------------------- WT-Wh *)
                          Œì ‚ãÖ Re ‚ä¢ wormhole(t1;t2) ‚àà (Œ± ‚üø Œ≤ ‚à£ R)

where "G '‚ãÖ' R '‚ä¢' t '‚àà' T" := (well_typed G R t T).

Hint Constructors well_typed : core.

(** ---- *)

(** ** Property - Type System *)

Open Scope term_scope.

#[export] Instance well_typed_iff : 
  Proper (VC.eq ==> RC.eq ==> Term.eq ==> Typ.eq ==> iff) well_typed.
Proof.
  intros Œì Œì' HGeq Re Re1 HReq t' t HTmeq Œ± Œ≤ HTyeq.
  unfold Term.eq,Typ.eq in *; subst; split.
  - intro wt; revert Œì' HGeq Re1 HReq; induction wt; intros; eauto.
    -- constructor; now rewrite <- HGeq.
    -- constructor; try (now rewrite <- HReq). 
       apply IHwt; auto; now rewrite HGeq.
    -- constructor; auto; try (now rewrite <- HReq). 
    -- constructor; auto; now rewrite <- HReq.
    -- apply wt_wh with (R' := R') (œÑ := œÑ); auto;
       try (apply IHwt2; auto); now rewrite <- HReq.
  - intro wt; revert Œì HGeq Re HReq; induction wt; intros; eauto.
    -- constructor; now rewrite HGeq.
    -- constructor; try (now rewrite HReq). 
       apply IHwt; auto; now rewrite <- HGeq.
    -- constructor; auto; now rewrite HReq.
    -- constructor; auto; now rewrite HReq.
    -- apply wt_wh with (R' := R') (œÑ := œÑ); auto;
       try (apply IHwt2; auto); now rewrite HReq.
Qed.

Lemma wt_deterministic (Œì : Œì) (Re : ‚Ñú) (t : Œõ) (Œ± Œ≤ : Œ§) :
  Œì ‚ãÖ Re ‚ä¢ t ‚àà Œ± -> Œì ‚ãÖ Re ‚ä¢ t ‚àà Œ≤ -> Œ± = Œ≤.
Proof.
  revert Œì Re Œ± Œ≤; induction t;
  intros G Re Œ± Œ≤ Hwt Hwt'; 
  inversion Hwt; subst; inversion Hwt'; subst; auto.
  - rewrite H2 in H3; inversion H3; auto.
  - f_equal; auto.
    apply IHt with (Œ± :=Œ≤0) in H7; auto.
  - apply IHt2 with (Œ± := Œ±0) in H7; auto; subst.
    apply IHt1 with (Œ± := <[Œ±1 ‚Üí Œ±]>) in H4; auto.
    now inversion H4; subst.
  - f_equal; 
    try (now apply (IHt1 G Re); auto);
    try (now apply (IHt2 G Re); auto).
  - apply (IHt G Re <[Œ± ‚Üí Œ±]>) in H3; auto.
    inversion H3; now subst.
  - apply (IHt G Re <[Œ± √ó Œ≤0]>) in H3; auto.
    now inversion H3.
  - apply (IHt G Re <[Œ±0 √ó Œ±]>) in H3; auto.
    now inversion H3.
  - apply (IHt G Re <[Œ±0 ‚Üí Œ≤0]>) in H3; auto.
    inversion H3; f_equal; auto.
  - apply (IHt G Re <[Œ±0 ‚üø Œ≤0 ‚à£ R]>) in H4; auto.
    inversion H4; f_equal; auto.
  - rewrite H2 in H3; inversion H3; f_equal; auto.
  - apply (IHt1 G Re <[Œ±0 ‚üø œÑ ‚à£ R1]>) in H3; auto.
    inversion H3; subst; clear H3.
    apply (IHt2 G Re <[œÑ0 ‚üø Œ≤0 ‚à£ R2]>) in H9; auto.
    inversion H9; subst; clear H9.
    apply Resources.eq_leibniz in H2,H4; subst; auto.
  - apply (IHt1 G Re œÑ) in H11; auto; subst.
    apply (IHt2 G _ <[Œ±0 ‚üø Œ≤0 ‚à£ R']>) in H13; auto.
    inversion H13; subst; clear H13.
    apply Resources.eq_leibniz in H1,H4; subst; auto.
Qed.

(** *** Used resource names come from the resource context

  Suppose a value [t] (1), well typed by [(Œ± ‚üø Œ≤ ‚à£ R)] under contexts [Œì] and [Re] (2). Resource names in the set of used resources [R] have to be in Re, i.e. We can use only resource names known.
*)
Theorem typing_Re_R (Œì : Œì) (Re : ‚Ñú) (t : Œõ) (Œ± Œ≤ : Œ§) (R : resources) :

       (* (1) *) value(t) -> (* (2) *) Œì ‚ãÖ Re ‚ä¢ t ‚àà (Œ± ‚üø Œ≤ ‚à£ R) -> 
  (* ---------------------------------------------------------------- *)
           (forall (r : resource), (r ‚àà R)%s -> (r ‚àà Re)%rc).
Proof.
  revert Œì Re Œ± Œ≤ R; induction t; intros Œì Re Œ± Œ≤ R Hvt Hwt r1 HIn; 
  inversion Hvt; subst; inversion Hwt; subst.
  (* arr *)
  - inversion HIn.
  (* first *)
  - apply (IHt Œì _ Œ±0 Œ≤0 R); assumption.
  (* rsf *)
  - rewrite Resources.St.singleton_spec in HIn; subst.
    exists (Œ±,Œ≤); now apply RC.find_2.
  (* comp *)
  - rewrite H9 in HIn. 
    apply Resources.St.union_spec in HIn as [HIn | HIn]; eauto.
  (* wormhole *)
  - rewrite H8 in HIn. 
    apply Resources.St.diff_spec in HIn as [HIn HnIn].
    eapply IHt2 in H12; eauto. 
    (repeat rewrite Resources.St.add_notin_spec in HnIn); destruct HnIn as [Hneq [Hneq' _]].
    (repeat rewrite RC.add_in_iff in H12). 
    destruct H12 as [Heq | [Heq | HIn']]; subst; try contradiction; assumption. 
Qed.

(** *** Well typed implies well formedness 

  Suppose a term [t], well typed by [œÑ] under contexts [Œì] and [Re] (3), knowing that both contexts are well formed under [Re‚Å∫] (1,2). We can prove that [t] and [œÑ] are also well formed under [Re‚Å∫] (4,5).
*)
Theorem well_typed_implies_Wf (Œì : Œì) (Re : ‚Ñú) (t : Œõ) (œÑ : Œ§) :

       (* (1) *) (Re‚Å∫ ‚ä© Œì)%vc ->  (* (2) *) (Re‚Å∫ ‚ä© Re)%rc -> (* (3) *) Œì ‚ãÖ Re ‚ä¢ t ‚àà œÑ ->
  (* -------------------------------------------------------------------------------------- *)
                      (* (4) *) Re‚Å∫ ‚ä© t /\ (* (5) *) (Re‚Å∫ ‚ä© œÑ)%ty.
Proof.
  revert Œì Re œÑ; induction t; simpl; intros Œì Re ty HvŒì HvRe Hwt; inversion Hwt; subst;
  try (apply IHt in H2 as [Hvt Hvf]; auto; inversion Hvf; subst; now repeat constructor).
  (* unit *)
  - repeat constructor.
  (* variable *)
  - split; try constructor. 
    now apply (VC.Wf_find (Re‚Å∫)) in H2.
  (* abstraction *)
  - apply (IHt (‚åàx ‚§Ü œÑ‚åâ Œì)%vc _ Œ≤) in HvRe; auto. 
    -- destruct HvRe; split; auto; constructor; assumption.
    -- now apply VContext.Wf_add.
  (* application *)
  - apply IHt1 in H3 as [Hvt1 Hvf]; eauto.
    apply IHt2 in H5 as [Hvt2 _]; eauto.
    inversion Hvf; subst.
    split; auto; constructor; auto.
  (* pair *) 
  - apply IHt1 in H3 as [Hvt1 HvŒ±]; apply IHt2 in H5 as [Hvt2 HvŒ≤]; auto; 
    now repeat constructor.
  (* first *)
  - apply IHt in H3 as [Hvt Hvf]; auto; inversion Hvf; subst.
    repeat constructor; auto.
  (* rsf *)
  - apply RC.Wf_find with (lb := Re‚Å∫) in H2 as [Hvr Hvf]; auto.
    inversion Hvf; simpl in *; repeat constructor; auto.
    now apply Resources.Wf_singleton_iff.
  (* comp *)
  - apply IHt1 in H1 as [Hvt1 HvŒ±]; apply IHt2 in H5 as [Hvt2 HvŒ≤]; auto.
    inversion HvŒ±; inversion HvŒ≤; subst; repeat constructor; auto.
    rewrite H2; rewrite Resources.Wf_union_iff; now split.
  (* wormhole *)
  - apply IHt1 in H6 as [Hvt1 HvœÑ]; auto.
    apply IHt2 in H8 as [Hvt2 Hvf]; rewrite RC.new_key_wh in *.
    -- inversion Hvf; subst; repeat constructor; auto. 
       rewrite H1; now apply Resources.Wf_wh.
    -- apply VC.Wf_weakening with (k := Re‚Å∫); auto.
    -- apply RC.Wf_wh; auto; now repeat constructor; simpl.
Qed.

(** *** Variable context weakening 

  Suppose a term [t], well typed by [œÑ] under contexts [Œì] and [Re] (2) and another variable context named [Œì'] such as [Œì] is included in [Œì'] (1). We can state that [t] is also well typed by swap [Œì] with [Œì'].
*)
Theorem weakening_Œì (Œì Œì' : Œì) (Re : ‚Ñú) (t : Œõ) (œÑ : Œ§) :

       (* (1) *) (Œì ‚äÜ Œì')%vc -> (* (2) *) Œì ‚ãÖ Re ‚ä¢ t ‚àà œÑ -> 
  (* -------------------------------------------------------- *)
                       Œì' ‚ãÖ Re ‚ä¢ t ‚àà œÑ .
Proof.
  intros Hsub wt; revert Œì' Hsub; induction wt; intros; auto;
  try (econstructor; now eauto).
  - constructor; now apply (VC.Submap_find _ _ Œì0).
  - apply wt_abs; auto; apply IHwt. 
    now apply VC.Submap_add.
Qed.

Open Scope typ_scope.

(** *** Resource context weakening 

  Suppose a term [t], well typed by [œÑ] under contexts [Œì] and [Re] (5) and another resource context named [Re1] such as ([[‚ßê k ‚Äì (k' - k)] Re]) is included in [Re1] (4). [k] and [k'] are levels such as they satisfy hypothesis (1),(2) and (3). We prove that [t] is also well typed by swap [Re] with [Re1] modulo [shift] applications.
  
*)
Theorem weakening_‚Ñú_gen (k k' : lvl) (Œì : Œì) (Re Re1 : ‚Ñú) (t : Œõ) (œÑ : Œ§) :

        (* (1) *) k <= Re‚Å∫ ->  (* (2) *) k <= k' -> (* (3) *) k' - k = Re1‚Å∫ - Re‚Å∫ ->
         (* (4) *) (([‚ßê k ‚Äì (k' - k)] Re) ‚äÜ Re1)%rc -> (* (5) *) Œì ‚ãÖ Re ‚ä¢ t ‚àà œÑ -> 
  (* ------------------------------------------------------------------------------------ *)
       ([‚ßê k ‚Äì (k' - k)] Œì)%vc ‚ãÖ Re1 ‚ä¢ {Term.shift k (k' - k) t} ‚àà [‚ßê k ‚Äì {k' - k}] œÑ.
Proof.
  intros Hle Hle' Heq Hsub wt; revert Re1 k k' Hle Hle' Hsub Heq.
  induction wt; intros Re1 n m Hle Hle' Hsub Heq; simpl; auto.
  (* variable *)
  - constructor; now apply VC.shift_find_iff.
  (* abstraction *)
  - constructor.
    -- rewrite <- VC.shift_add; now apply IHwt.
    -- assert (Re‚Å∫ <= Re1‚Å∫).
       { 
         apply RC.Ext.new_key_Submap in Hsub. 
         now rewrite <- RC.shift_new_key_le in Hsub.
       }
       apply (Typ.shift_preserves_wf_gen (Re‚Å∫)); auto; lia. 
  (* application *)
  - apply wt_app with (Œ± := <[[‚ßên ‚Äì {m - n}] Œ±]>); auto.
  (* fst *)
  - simpl in *; apply wt_fst with (Œ≤ := <[[‚ßê n ‚Äì {m - n}] Œ≤]>); auto.
  (* snd *)
  - simpl in *; apply wt_snd with (Œ± := <[[‚ßê n ‚Äì {m - n}] Œ±]>); auto.
  (* first *)
  - econstructor; eauto. 
    assert (Re‚Å∫ <= Re1‚Å∫).
    { 
      apply RC.Ext.new_key_Submap in Hsub. 
      now rewrite <- RC.shift_new_key_le in Hsub.
    }
    apply Typ.shift_preserves_wf_gen with (Re‚Å∫); auto; lia.
  (* comp *)
  - econstructor; eauto.
    -- rewrite <- Resources.shift_union.
       now rewrite H.
    -- rewrite <- Resources.shift_inter; rewrite <- H0. 
       now rewrite Resources.shift_empty.
  (* rsf *)
  - rewrite Resources.shift_singleton; constructor.
    apply RC.Submap_find with (m :=  ([‚ßê n ‚Äì m - n] Re)); auto.
    apply RC.shift_find_iff with (lb := n) (k := m - n) in H; auto.
  (* wormhole *)
  - assert (Hle1 : Re‚Å∫ <= Re1‚Å∫). 
    { 
      apply RC.Ext.new_key_Submap in Hsub. 
      now rewrite <- RC.shift_new_key_le in Hsub.
    }
    eapply wt_wh with (œÑ := <[[‚ßê n ‚Äì {m - n}] œÑ]>) (R' := ([‚ßê n ‚Äì m - n] R')%rs); auto.
    -- rewrite H; rewrite Resources.shift_diff.
       repeat rewrite Resources.shift_add_notin.
       + unfold Resource.shift. 
         rewrite <- Nat.leb_le in Hle; rewrite Hle.
         replace (n <=? S (Re‚Å∫)) with true.
         ++ rewrite Resources.shift_empty. 
            rewrite Heq; simpl.
            now replace (Re‚Å∫ + (Re1‚Å∫ - Re‚Å∫)) with (Re1‚Å∫) by lia.
        ++ symmetry; rewrite Nat.leb_le in *; lia.
      + intro HIn; inversion HIn.
      + rewrite Resources.St.add_notin_spec; split; auto. 
        intro HIn; inversion HIn.
    -- apply Typ.shift_preserves_wf_gen with (Re‚Å∫); auto; lia.
    -- apply Typ.shift_preserves_wf_gen with (Re‚Å∫); auto; lia.
    -- apply IHwt2; rewrite RC.new_key_wh in *; try lia. 
       + repeat rewrite RC.shift_add_notin.
         ++ unfold PairTyp.shift; simpl; unfold Resource.shift.
           replace (n <=? S (Re‚Å∫)) with true; replace (n <=? Re‚Å∫) with true;
           try (symmetry; rewrite Nat.leb_le; lia).
           replace (Re‚Å∫ + (m - n)) with (Re1‚Å∫) by lia.
           replace (S (Re ‚Å∫) + (m - n)) with (S (Re1‚Å∫)) by lia.
           now repeat apply RC.Submap_add.
        ++ apply RC.Ext.new_key_notin; lia.
        ++ apply RC.Ext.new_key_notin.
           rewrite RC.Ext.new_key_add_max; lia.
      + rewrite RC.new_key_wh; lia.
Qed.

(** *** Weakening corollaries *)

Corollary weakening_Œì_empty (Œì : Œì) (Re : ‚Ñú) (t : Œõ) (œÑ : Œ§) :

       (‚àÖ)%vc ‚ãÖ Re ‚ä¢ t ‚àà œÑ -> 
  (* -------------------------- *)
          Œì ‚ãÖ Re ‚ä¢ t ‚àà œÑ.
Proof. apply weakening_Œì; apply VContext.Submap_empty_bot. Qed.

Corollary weakening_‚Ñú_1 (Œì : Œì) (Re Re1 : ‚Ñú) (t : Œõ) (œÑ : Œ§) :

                (Re‚Å∫ ‚ä© Re)%rc -> (Re ‚äÜ Re1)%rc -> Œì ‚ãÖ Re ‚ä¢ t ‚àà œÑ -> 
(* ---------------------------------------------------------------------------------- *)
     ([‚ßê Re‚Å∫ ‚Äì (Re1‚Å∫ - Re‚Å∫)] Œì)%vc ‚ãÖ Re1 ‚ä¢ 
               {Term.shift (Re‚Å∫) (Re1‚Å∫ - Re‚Å∫) t} ‚àà ([‚ßê {Re‚Å∫} ‚Äì {Re1‚Å∫ - Re‚Å∫}] œÑ)%ty.
Proof. 
  intros HvRe Hsub Hwt; apply weakening_‚Ñú_gen with (Re := Re); auto.
  - now apply RC.Ext.new_key_Submap.
  - rewrite RC.shift_wf_refl; auto.
Qed.

Corollary weakening_‚Ñú (Œì : Œì) (Re Re1 : ‚Ñú) (t : Œõ) (œÑ : Œ§) :

       (Re‚Å∫ ‚ä© Œì)%vc -> (Re‚Å∫ ‚ä© Re)%rc -> (Re ‚äÜ Re1)%rc -> Œì ‚ãÖ Re ‚ä¢ t ‚àà œÑ -> 
  (* ----------------------------------------------------------------------- *)
              Œì ‚ãÖ Re1 ‚ä¢ {Term.shift (Re‚Å∫) (Re1‚Å∫ - Re‚Å∫) t} ‚àà œÑ.
Proof.
  intros HvŒì HvRe Hsub Hwt.
  apply (weakening_‚Ñú_1 _ _ Re1) in Hwt as Hwt'; auto.
  rewrite VC.shift_wf_refl in Hwt'; auto.
  apply well_typed_implies_Wf in Hwt as [_ HvœÑ]; auto.
  now rewrite Typ.shift_wf_refl in Hwt'. 
Qed.

Corollary weakening_‚Ñú_2 (k k' : lvl) (Œì : Œì) (Re Re1 : ‚Ñú) (t : Œõ) (œÑ : Œ§) :

      (Re‚Å∫ ‚ä© Œì)%vc -> (Re‚Å∫ ‚ä© Re)%rc -> k = Re‚Å∫ -> k' = Re1‚Å∫ - Re‚Å∫ ->
                (Re ‚äÜ Re1)%rc -> Œì ‚ãÖ Re ‚ä¢ t ‚àà œÑ -> 
  (* ------------------------------------------------------------------ *) 
                Œì ‚ãÖ Re1 ‚ä¢ {Term.shift k k' t} ‚àà œÑ.
Proof. intros; subst; now apply weakening_‚Ñú. Qed.

Corollary weakening_‚Ñú_wh (Œì : Œì) (Re : ‚Ñú) (t : Œõ) (Œ± Œ≤ œÑ : Œ§) :

                (Re‚Å∫ ‚ä© Œì)%vc -> (Re‚Å∫ ‚ä© Re)%rc -> Œì ‚ãÖ Re ‚ä¢ t ‚àà œÑ -> 
  (* ------------------------------------------------------------------------------- *)
       Œì ‚ãÖ (‚åàS (Re‚Å∫) ‚§Ü (Œ≤, Œ±)‚åâ (‚åàRe‚Å∫ ‚§Ü (Œ±, Œ≤)‚åâ Re)) ‚ä¢ {Term.shift (Re‚Å∫) 2 t} ‚àà œÑ.
Proof.
  intros HvŒì HvRe Hwt.
  apply (weakening_‚Ñú_2 _ _ _ Re); auto.
  - rewrite RC.new_key_wh; lia.
  - apply RC.Submap_wh.
Qed.