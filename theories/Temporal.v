From Coq Require Import Lists.List.
From Mecha Require Import RealResource REnvironment Term Functional Resource Cell Typing VContext Typ
               Resources Evaluation RContext.

(** * Transition - Temporal

rsf's semantics are divided in three sub semantics:
- evaluation transition
- functional transition
- temporal transition <--

*)

Module RE := REnvironment.
Reserved Notation "'Inst‚Çú‚Çú(' Re , Rf )" (at level 50).

(** *** Definition *)

Inductive temporal : RealResources.t -> RealResources.t -> Œõ -> Œõ -> Prop :=
 TT_instant : forall Vin Vout (R R' : RealResources.t) (P P' : Œõ),

                    (Vin = RE.embeds (fst (RealResources.nexts R)))%re ->
                    ‚™° Vin ; unit ; P ‚™¢ ‚≠Ü ‚™° Vout ; unit ; P' ‚™¢ ->
                    R' = RealResources.puts (RE.extracts Vout) (snd (RealResources.nexts R)) -> 
                    
                    temporal R R' P P'.

Notation "'‚ü¶' R ';' P '‚üß' '‚üæ' '‚ü¶' R1 ';' P1 '‚üß'" := (temporal R R1 P P1) 
                                                     (at level 30, R constr, R1 constr,
                                                         P custom rsf, P1 custom rsf, 
                                                        no associativity).

Inductive multi_temporal : RealResources.t -> RealResources.t -> Œõ -> Œõ -> Prop :=
  TT_step : forall R R' R'' (P P' P'' : Œõ), 
                  ‚ü¶ R ; P ‚üß ‚üæ ‚ü¶ R' ; P' ‚üß -> 
                  multi_temporal R' R'' P' P'' -> 
                  multi_temporal R R'' P P''.

Notation "'‚ü¶' R ';' P '‚üß' '‚üæ‚ãÜ' '‚ü¶' R1 ';' P1 '‚üß'" := (multi_temporal R R1 P P1) 
                                                     (at level 30, R constr, R1 constr,
                                                         P custom rsf, P1 custom rsf, 
                                                        no associativity).

Inductive instantiation_temp : ‚Ñú -> RealResources.t -> Prop :=
  | itTT_empty  : forall (Re : ‚Ñú) (Fl : RealResources.t), 
                     isEmpty·µ£·µ™(Re) -> Inst‚Çú‚Çú(Re,nil)

  | itTT_init   : forall (Re Re' : ‚Ñú) (Fl : RealResources.t) (œÑ œÑ' : Œ§) (r : RealResource.t),
      Inst‚Çú‚Çú(Re,Fl) ->
      Add·µ£·µ™ (new·µ£·µ™(Re)) (œÑ,œÑ') Re Re' ->
      Streams.ForAll (fun v => ‚àÖ·µ•·µ™ ‚ãÖ Re ‚ä´ {Streams.hd v} ‚àà œÑ) (fst r) -> 
      Streams.ForAll (fun v => ‚àÖ·µ•·µ™ ‚ãÖ Re ‚ä´ {Streams.hd v} ‚àà œÑ') (snd r) -> 
      Inst‚Çú‚Çú(Re',Fl ++ (r :: nil))
(*
  | itfT_update : forall (Re : ‚Ñú) (V V' : ùì•) r (œÑ œÑ' : Œ§) (v : Œõ),
                    Inst·µ£‚Çú(Re,V) -> Re ‚åàr ‚©¶ (œÑ,œÑ')‚åâ·µ£·µ™ -> 
                    r ‚àà·µ£·µ¶ V -> Add·µ£·µ¶ r ((‚©Ω ‚Ä¶ v ‚©æ)) V V' -> 
                    ‚àÖ·µ•·µ™ ‚ãÖ Re ‚ä´ v ‚àà œÑ -> Inst·µ£‚Çú(Re,V')
*)
where "'Inst‚Çú‚Çú(' Re , Fl )" := (instantiation_temp Re Fl).

(** *** Initialization *)

Theorem initialization_unused : forall l,
  RE.For_all (fun _ v => Cell.unused v) (RE.embeds l).
Proof.
  intros. apply RE.embedding_Forall_unused.
  unfold RE.For_all; intros. inversion H.
Qed.

Lemma resource_used_init_unused : forall Re t Œ± Œ≤ R l V,
  ‚àÖ·µ•·µ™ ‚ãÖ Re ‚ä´ t ‚àà (Œ± ‚üø Œ≤ ‚à£ R) ->
  halts t ->
  Inst·µ£‚Çú(Re,V) ->
  (V = (RE.embeds l))%re ->
  
  (forall r, (r ‚àà R)%rs -> RE.unused r V).
Proof.
  intros. destruct H0 as [t' [HmeT Hvt']].
  apply multi_preserves_typing with (t' := t') in H; auto.
  apply typing_Re_R with (r := r) in H; auto.
  apply instantiation_in with (V := V) in H; auto.
  rewrite H2 in *. destruct H; apply RE.OP.P.find_1 in H.
  apply initialization_unused in H as H'; destruct x; inversion H'.
  exists Œª. now rewrite H2.
Qed. 

(** *** Proof of typing preservation through the temporal transition *)
Theorem temporal_preserves_typing (Re : ‚Ñú) Rf Rf' (P P' : Œõ) (R : resources) :

    (* (1) *) ‚àÖ·µ•·µ™ ‚ãÖ Re ‚ä´ P ‚àà (ùüô ‚üø ùüô ‚à£ R) ->
    (* (3) *) ‚ü¶ Rf ; P ‚üß ‚üæ ‚ü¶ Rf' ; P' ‚üß ->
              Inst‚Çú‚Çú(Re,Rf) ->

  (*---------------------------------------------------------------------------------------------*)
      ‚àÖ·µ•·µ™ ‚ãÖ Re ‚ä´ P' ‚àà (ùüô ‚üø ùüô ‚à£ R) /\ Inst‚Çú‚Çú(Re,Rf').
Proof.
  intros HwP HTT Hinst; inversion HTT; subst. 
  (*
  destruct (RealResources.nexts Rf) as [sample tail]; simpl in *.
  eapply functional_preserves_typing in H0; eauto.
  - split; destruct H0 as [_ [_ [HinstV [_ [_ HwP']]]]].
    -- assumption.
    -- 
  - now constructor.
  - now rewrite H.
Qed.*)
Admitted.

(*
(** *** Proof of typing preservation through multi temporal transitions *)
Theorem multi_temporal_preserves_typing (Re : ‚Ñú) Rf Rf' (P P' : Œõ) (R : resources) :

    (* (1) *) ‚àÖ·µ•·µ™ ‚ãÖ Re ‚ä´ P ‚àà (ùüô ‚üø ùüô ‚à£ R) ->
    (* (3) *) ‚ü¶ Rf ; P ‚üß ‚üæ‚ãÜ ‚ü¶ Rf' ; P' ‚üß ->
              Inst·µ£‚Çú(Re,RE.embeds (fst (RealResources.nexts Rf))) ->

  (*---------------------------------------------------------------------------------------------*)
      ‚àÖ·µ•·µ™ ‚ãÖ Re ‚ä´ P' ‚àà (ùüô ‚üø ùüô ‚à£ R).
Proof.
  intros HwP HTT Hinst; induction HTT; subst.
  eapply temporal_preserves_typing in H; eauto; apply IHHTT; auto.  
  destruct (RealResources.nexts Rf) as [sample tail]; simpl in *.
  eapply functional_preserves_typing in H0; eauto.
  - now destruct H0 as [_ [_ [_ [_ [_ HwP']]]]].
  - now constructor.
  - now rewrite H.
Qed.
*)

Theorem progress_of_temporal (Re : ‚Ñú) (Rf : RealResources.t) (P : Œõ) (R : resources) :

  (* (1) *) halts P -> (* (2) *) RealResources.halts Rf -> (* (3) *) all_arrow_halting ->

  (* (4) *) ‚àÖ·µ•·µ™ ‚ãÖ Re ‚ä´ P ‚àà (ùüô ‚üø ùüô ‚à£ R) -> (* (5) *) Inst‚Çú‚Çú(Re,Rf) ->
  
  (*-------------------------------------------------------------------------------------------------*)
    exists Rf' P',  (* (6) *) ‚ü¶ Rf ; P ‚üß ‚üæ‚ãÜ ‚ü¶ Rf' ; P' ‚üß /\ 
                    (* (7) *) halts P' /\ (* (8) *) RealResources.halts Rf.
Proof. 
Admitted.